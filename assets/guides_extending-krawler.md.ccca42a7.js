import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.e713b733.js";const u=JSON.parse('{"title":"Extending Krawler","description":"","frontmatter":{},"headers":[],"relativePath":"guides/extending-krawler.md","filePath":"guides/extending-krawler.md"}'),o={name:"guides/extending-krawler.md"},l=n(`<h1 id="extending-krawler" tabindex="-1">Extending Krawler <a class="header-anchor" href="#extending-krawler" aria-label="Permalink to &quot;Extending Krawler&quot;">​</a></h1><p>In the future we might consider others options to extend krawler like a plugin architecture but for now you can use the following ways to do so.</p><h2 id="extend-services" tabindex="-1">Extend services <a class="header-anchor" href="#extend-services" aria-label="Permalink to &quot;Extend services&quot;">​</a></h2><p>In order to keep krawler generic <a href="./../reference/services.html">all services</a> are not tied to specific implementations. As a consequence, each time a create operation is run on a service it expects as input a <code>type</code> and <code>options</code> parameters used to delegate the actual instantiation to a user-registered construction function. The <a href="https://github.com/kalisio/krawler/blob/master/src/services/service.js" target="_blank" rel="noreferrer">base service</a> class is used to implement this behavior on all our services, to register a new constructor:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">service</span><span style="color:#E1E4E8;">(serviceName)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerGenerator</span><span style="color:#E1E4E8;">(typeName, (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a service entity based on provided options</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">service</span><span style="color:#24292E;">(serviceName)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerGenerator</span><span style="color:#24292E;">(typeName, (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a service entity based on provided options</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>The type of the created entity depends on the service being extended:</p><ul><li>a store constructor should return an <a href="https://github.com/maxogden/abstract-blob-store" target="_blank" rel="noreferrer">abstract-blob-store</a> object,</li><li>a task constructor should return a <a href="https://nodejs.org/api/stream.html" target="_blank" rel="noreferrer">stream</a> to extract data from that is piped to the target store,</li><li>a job constructor should return a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">promise</a> resolved or rejected when the job is finished or has failed.</li></ul><p>If you do not use the services in your app but the CLI mode, you should extend the default services used by the CLI like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StoresService, TasksService, JobsService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@kalisio/krawler&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">StoresService</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerGenerator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;custom-store&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a store entity based on provided options</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StoresService, TasksService, JobsService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@kalisio/krawler&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">StoresService</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerGenerator</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;custom-store&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a store entity based on provided options</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="extend-hooks" tabindex="-1">Extend hooks <a class="header-anchor" href="#extend-hooks" aria-label="Permalink to &quot;Extend hooks&quot;">​</a></h2><p>It is possible to add user-registered hook constructor functions like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hooks } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@kalisio/krawler&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// A krawler hook constructor function</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Standard FeathersJS hook function</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...do</span><span style="color:#E1E4E8;"> something that depends on options</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hook</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">hooks.</span><span style="color:#B392F0;">registerHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;">, hook)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hooks } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@kalisio/krawler&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// A krawler hook constructor function</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Standard FeathersJS hook function</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">hook</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...do</span><span style="color:#24292E;"> something that depends on options</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hook</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">hooks.</span><span style="color:#6F42C1;">registerHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;">, hook)</span></span></code></pre></div><p>After that you can use your custom hook like the built-in ones with the <a href="./using-krawler.html#command-line-interface">CLI</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For this to work you need to add krawler as a dependency in the <code>package.json</code> of your job module or link to it in development mode. Please refer to our <a href="./installing-krawler.html#as-module">installation section</a></p></div><h2 id="complete-example" tabindex="-1">Complete example <a class="header-anchor" href="#complete-example" aria-label="Permalink to &quot;Complete example&quot;">​</a></h2><p>A complete example of extension is available in the <a href="https://github.com/kalisio/krawler/blob/master/examples/extend/index.js" target="_blank" rel="noreferrer">samples</a>.</p>`,16),p=[l];function t(r,c,i,E,y,d){return a(),e("div",null,p)}const k=s(o,[["render",t]]);export{u as __pageData,k as default};
