import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.e713b733.js";const u=JSON.parse('{"title":"Using Krawler API","description":"","frontmatter":{},"headers":[],"relativePath":"guides/using-krawler.md","filePath":"guides/using-krawler.md"}'),o={name:"guides/using-krawler.md"},l=e(`<h1 id="using-krawler-api" tabindex="-1">Using Krawler API <a class="header-anchor" href="#using-krawler-api" aria-label="Permalink to &quot;Using Krawler API&quot;">​</a></h1><p>The problem with hooks is that they are configured at application setup time and usually fixed during the whole application lifecycle. It means you would have a to create an application instance for each pipeline you’d like to have, not so simple. This is the reason why krawler is mainly used as a command-line utility (CLI), where each execution setup a new application with a hooks pipeline according to the job to be done.</p><p>However, using the CLI, you can also launch it as standard wep application/API. You can then POST job or task requests to the exposed services, e.g. on <code>localhost:3030/api/jobs</code>.</p><h1 id="command-line-interface" tabindex="-1">Command-Line Interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command-Line Interface&quot;">​</a></h1><h2 id="internal-api" tabindex="-1">Internal API <a class="header-anchor" href="#internal-api" aria-label="Permalink to &quot;Internal API&quot;">​</a></h2><p>The underlying implementation is managed by the global <strong>run(jobfile, options)</strong> function:</p><ul><li><strong>jobfile</strong>: a path to a local job file or a jobfile JSON object</li><li><strong>options</strong>: <ul><li><strong>cron</strong>: a <a href="https://github.com/kelektiv/node-cron" target="_blank" rel="noreferrer">CRON pattern</a> to schedule the job at regular intervals, e.g. <code>*/5 * * * * *</code> will run it every 5 seconds, if not provided it will be run only once</li><li><strong>proxy</strong>: proxy URL to be used for HTTP requests</li><li><strong>proxy-https</strong>: proxy URL to be used for HTTPS requests</li><li><strong>user</strong>: user name to be used for proxy</li><li><strong>password</strong>: user password to be used for proxy</li><li><strong>debug</strong>: output debug messages</li><li><strong>sync</strong>: activate <a href="https://github.com/feathersjs-ecosystem/feathers-sync" target="_blank" rel="noreferrer">sync module</a> with given connection URI so that internal events can be listened externally</li><li><strong>port</strong>: port to be used by the krawler (defaults to <code>3030</code>)</li><li><strong>api</strong>: launch the krawler as a web service/API</li><li><strong>api-prefix</strong>: api prefix to be used when launching the krawler as a web service/API (defaults to <code>/api</code>)</li></ul></li></ul><p>This function is responsible of parsing the job definition including all the required parameters to call the underlying services with the relevant hooks configured (see below).</p><h2 id="external-api" tabindex="-1">External API <a class="header-anchor" href="#external-api" aria-label="Permalink to &quot;External API&quot;">​</a></h2><p>The jobfile is the sole mandatory argument of the CLI and options are read from the CLI arguments with the same names as in the <a href="./using-krawler.html#internal-api]">internal API</a> or using shortcuts like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">krawler</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--user</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user_name</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-P</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy_url</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cron</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*/5 * * * * *&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path_to_jobfile.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">krawler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--user</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user_name</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">password</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy_url</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cron</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*/5 * * * * *&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path_to_jobfile.json</span></span></code></pre></div><p>A jobfile could be a JSON or JS file (it will be <code>require()</code>) and its structure is the following:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> job </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Options for job executor</span></span>
<span class="line"><span style="color:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    workersLimit: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    faultTolerant: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Store to be used for job output</span></span>
<span class="line"><span style="color:#E1E4E8;">  store: </span><span style="color:#9ECBFF;">&#39;job-store&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Common options for all generated tasks</span></span>
<span class="line"><span style="color:#E1E4E8;">  taskTemplate: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Store to be used for task output</span></span>
<span class="line"><span style="color:#E1E4E8;">    store: </span><span style="color:#9ECBFF;">&#39;job-store&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    id: </span><span style="color:#9ECBFF;">&#39;&lt;%= jobId %&gt;-&lt;%= taskId %&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Hooks setup</span></span>
<span class="line"><span style="color:#E1E4E8;">  hooks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Tasks service hooks</span></span>
<span class="line"><span style="color:#E1E4E8;">    tasks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Hooks to be run after task creation</span></span>
<span class="line"><span style="color:#E1E4E8;">      after: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Each entry is a hook name and associated options object</span></span>
<span class="line"><span style="color:#E1E4E8;">        computeSomething: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hookOption: </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Jobs service hooks</span></span>
<span class="line"><span style="color:#E1E4E8;">    jobs: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Hooks to be run before job creation</span></span>
<span class="line"><span style="color:#E1E4E8;">      before: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        generateTasks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hookOption: </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Hooks to be run after job creation</span></span>
<span class="line"><span style="color:#E1E4E8;">      after: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        generateOutput: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          hookOption: </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// The list of tasks to run if not generated by hooks</span></span>
<span class="line"><span style="color:#E1E4E8;">  tasks: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Options for job executor</span></span>
<span class="line"><span style="color:#24292E;">  options: {</span></span>
<span class="line"><span style="color:#24292E;">    workersLimit: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    faultTolerant: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Store to be used for job output</span></span>
<span class="line"><span style="color:#24292E;">  store: </span><span style="color:#032F62;">&#39;job-store&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Common options for all generated tasks</span></span>
<span class="line"><span style="color:#24292E;">  taskTemplate: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Store to be used for task output</span></span>
<span class="line"><span style="color:#24292E;">    store: </span><span style="color:#032F62;">&#39;job-store&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    id: </span><span style="color:#032F62;">&#39;&lt;%= jobId %&gt;-&lt;%= taskId %&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    options: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Hooks setup</span></span>
<span class="line"><span style="color:#24292E;">  hooks: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Tasks service hooks</span></span>
<span class="line"><span style="color:#24292E;">    tasks: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Hooks to be run after task creation</span></span>
<span class="line"><span style="color:#24292E;">      after: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Each entry is a hook name and associated options object</span></span>
<span class="line"><span style="color:#24292E;">        computeSomething: {</span></span>
<span class="line"><span style="color:#24292E;">          hookOption: </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Jobs service hooks</span></span>
<span class="line"><span style="color:#24292E;">    jobs: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Hooks to be run before job creation</span></span>
<span class="line"><span style="color:#24292E;">      before: {</span></span>
<span class="line"><span style="color:#24292E;">        generateTasks: {</span></span>
<span class="line"><span style="color:#24292E;">          hookOption: </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Hooks to be run after job creation</span></span>
<span class="line"><span style="color:#24292E;">      after: {</span></span>
<span class="line"><span style="color:#24292E;">        generateOutput: {</span></span>
<span class="line"><span style="color:#24292E;">          hookOption: </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// The list of tasks to run if not generated by hooks</span></span>
<span class="line"><span style="color:#24292E;">  tasks: [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When running the krawler as a web API note that only the hooks pipeline is mandatory in the job file. Indeed, job and task objects will be then sent by requesting the exposed web services.</p></div><h1 id="healthcheck" tabindex="-1">Healthcheck <a class="header-anchor" href="#healthcheck" aria-label="Permalink to &quot;Healthcheck&quot;">​</a></h1><h2 id="healthcheck-endpoint" tabindex="-1">Healthcheck endpoint <a class="header-anchor" href="#healthcheck-endpoint" aria-label="Permalink to &quot;Healthcheck endpoint&quot;">​</a></h2><p>When running the krawler as a cron job note that it provides a healthcheck endpoint e.g. on <code>localhost:3030/api/healthcheck</code>. The following JSON structure is returned:</p><ul><li><code>isRunning</code>: boolean indicating if the cron job is currently running</li><li><code>duration</code>: last run duration in seconds</li><li><code>nbSkippedJobs</code>: number of times the scheduled job has been skipped due to an on-going one</li><li><code>error</code>: returned error object whenever the cron job has erroned</li><li><code>nbFailedTasks</code>: number of failed tasks for last run for fault-tolerant jobs</li><li><code>nbSuccessfulTasks</code>: number of successful tasks for last run for fault-tolerant jobs</li><li><code>successRate</code>: Ratio of successful tasks / total tasks</li></ul><p>The returned HTTP code is <code>500</code> whenever an error has occured in the last run, <code>200</code> otherwise.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can add your custom data in the healthcheck structure using the <a href="./../reference/hooks.html#healthcheck-options"><code>healthcheck</code></a> hook.</p></div><h2 id="healthcheck-command" tabindex="-1">Healthcheck command <a class="header-anchor" href="#healthcheck-command" aria-label="Permalink to &quot;Healthcheck command&quot;">​</a></h2><p>For convenience the krawler also includes a built-in healthcheck script that could be used e.g. by <a href="https://docs.docker.com/engine/reference/commandline/service_create/" target="_blank" rel="noreferrer">Docker</a>. This script uses similar options than the CLI plus some specific options:</p><ul><li><strong>debug</strong>: output debug messages</li><li><strong>port</strong>: port used by the krawler (defaults to <code>3030</code>)</li><li><strong>api</strong>: indicates if the krawler has been launched as a web service/API</li><li><strong>api-prefix</strong>: api prefix used when launching the krawler as a web service/API (defaults to <code>/api</code>)</li><li><strong>success-rate</strong>: the success rate for fault-tolerant jobs to be considered as successful when greater or equal (defaults to 1)</li><li><strong>max-duration</strong>: the maximum run duration in seconds for fault-tolerant jobs to be considered as failed if greater than (defaults to unset)</li><li><strong>nb-skipped-jobs</strong>: the number of skipped runs for scheduled fault-tolerant jobs to be considered as failed (defaults to 3)</li><li><strong>slack-webhook</strong>: <a href="https://api.slack.com/incoming-webhooks" target="_blank" rel="noreferrer">Slack webhook URL</a> to post messages on failure (defaults to p<wbr>rocess.env.SLACK_WEBHOOK_URL)</li><li><strong>message-template</strong>: Message template used on failure for console and Slack output (defaults to <code>Job &lt;%= jobId %&gt;: &lt;%= error.message %&gt;</code>)</li><li><strong>link-template</strong>: Link template used on failure for Slack output (defaults to empty value)</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Templates are generated with healthcheck structure and environment variables as context, learn more about <a href="https://lodash.com/docs/4.17.4#template" target="_blank" rel="noreferrer">templating</a>.</p></div>`,24),p=[l];function t(r,c,i,E,h,d){return n(),a("div",null,p)}const b=s(o,[["render",t]]);export{u as __pageData,b as default};
