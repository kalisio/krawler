import{_ as e,o as r,c as a,Q as t}from"./chunks/framework.e713b733.js";const s="/krawler/assets/krawler-overview.47066136.png",u=JSON.parse('{"title":"Understanding Krawler","description":"","frontmatter":{},"headers":[],"relativePath":"guides/understanding-krawler.md","filePath":"guides/understanding-krawler.md"}'),o={name:"guides/understanding-krawler.md"},n=t('<h1 id="understanding-krawler" tabindex="-1">Understanding Krawler <a class="header-anchor" href="#understanding-krawler" aria-label="Permalink to &quot;Understanding Krawler&quot;">​</a></h1><p><strong>krawler</strong> is powered by <a href="https://feathersjs.com/" target="_blank" rel="noreferrer">Feathers</a> and rely on two of its main abstractions: <a href="https://docs.feathersjs.com/api/services.html" target="_blank" rel="noreferrer">services</a> and <a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">hooks</a>. We assume you are familiar with this technology.</p><h2 id="main-concepts" tabindex="-1">Main concepts <a class="header-anchor" href="#main-concepts" aria-label="Permalink to &quot;Main concepts&quot;">​</a></h2><p><strong>krawler</strong> manipulates three kind of entities:</p><ul><li>a <strong>store</strong> define where the extracted/processed data will reside,</li><li>a <strong>task</strong> define what data to be extracted and how to query it,</li><li>a <strong>job</strong> define what tasks to be run to fulfill a request (i.e. sequencing).</li></ul><p>On top of this <a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">hooks</a> provide a set of functions that can be typically run before/after a task/job such as a conversion after a download or task generation before a job run. More or less, this allows to create a <a href="https://en.wikipedia.org/wiki/Pipeline_(computing)" target="_blank" rel="noreferrer">processing pipeline</a>.</p><p>Regarding the store management we rely on <a href="https://github.com/maxogden/abstract-blob-store" target="_blank" rel="noreferrer">abstract-blob-store</a>, which abstracts a lot of different storage backends (local file system, AWS S3, Google Drive, etc.), and is already used by <a href="https://github.com/feathersjs-ecosystem/feathers-blob" target="_blank" rel="noreferrer">feathers-blob</a>.</p><h2 id="global-overview" tabindex="-1">Global overview <a class="header-anchor" href="#global-overview" aria-label="Permalink to &quot;Global overview&quot;">​</a></h2><p>The following figure depicts the global architecture and all concepts at play:</p><p><img src="'+s+'" alt="Architecture"></p><h2 id="what-is-inside" tabindex="-1">What is inside ? <a class="header-anchor" href="#what-is-inside" aria-label="Permalink to &quot;What is inside ?&quot;">​</a></h2><p><strong>krawler</strong> is possible and mainly powered by the following stack:</p><ul><li><a href="https://feathersjs.com/" target="_blank" rel="noreferrer">Feathers</a></li><li><a href="https://lodash.com/" target="_blank" rel="noreferrer">Lodash</a> A JavaScript utility library</li><li><a href="https://github.com/naturalatlas/node-gdal" target="_blank" rel="noreferrer">node-gdal</a> the Node.js binding of <a href="http://www.gdal.org/" target="_blank" rel="noreferrer">GDAL / OGR</a> used to process rasters and vectors</li><li><a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noreferrer">js-yaml</a> used to process YAML files</li><li><a href="https://github.com/Leonidas-from-XIV/node-xml2js" target="_blank" rel="noreferrer">xml2js</a> used to process XML files</li><li><a href="https://github.com/zemirco/json2csv" target="_blank" rel="noreferrer">json2csv</a> used to process CSV files</li><li><a href="https://github.com/C2FO/fast-csv" target="_blank" rel="noreferrer">fast-csv</a> used to stream CSV files</li><li><a href="https://github.com/maxogden/abstract-blob-store" target="_blank" rel="noreferrer">abstract-blob-store</a> used to abstract storage</li><li><a href="https://github.com/request/request" target="_blank" rel="noreferrer">request</a> used to manage HTTP requests</li><li><a href="https://github.com/brianc/node-postgres" target="_blank" rel="noreferrer">node-postgres</a> used to manage PostgreSQL database</li><li><a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noreferrer">node-mongodb</a> used to manage MongoDB database</li></ul>',13),l=[n];function i(h,d,c,g,f,b){return r(),a("div",null,l)}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
